resource "aws_ecs_cluster" "ecs_cluster" {
  name = "test-cluster"
}

resource "aws_ecs_task_definition" "ecs_task_definition" {
  family                = "test-task-definition"
  network_mode          = "awsvpc"
  task_role_arn         = "${aws_iam_role.ecs_task_execution_role.arn}"
  execution_role_arn    = "${aws_iam_role.ecs_task_execution_role.arn}"
  requires_compatibilities = ["FARGATE"]

  container_definitions = <<DEFINITION
[
  {
    "name": "test-container",
    "image": "${var.ecr_image_url}:latest",
    "essential": true,
    "portMappings": [
      {
        "containerPort": 8080,
        "hostPort": 8080,
        "protocol": "tcp"
      }
    ],
    "environment": [
      {
        "name": "DB_USERNAME",
        "value": "${var.bindu}"
      },
      {
        "name": "DB_PASSWORD",
        "value": "${var.koorma}"
      }
    ]
  }
]
DEFINITION
}

resource "aws_alb_target_group" "ecs_target_group" {
  name                = "test-target-group"
  port                = 8080
  protocol            = "HTTP"
  vpc_id              = "${var.vpc_id}"
  target_type         = "ip"
  health_check {
    path              = "/healthcheck"
    interval          = 30
    timeout           = 5
    healthy_threshold = 5
    unhealthy_threshold = 2
  }
}

resource "aws_alb" "ecs_alb" {
  name                = "test-alb"
  security_groups     = ["${var.security_group_id}"]
  subnets             = ["${var.public_subnet_ids}"]
  internal            = false
  load_balancer_type  = "application"

  certificate_arn     = "${var.certificate_arn}"
  enabled_zone_aware_routing = false

  tags = {
    Name = "test-alb"
  }
}

resource "aws_alb_listener" "ecs_listener" {
  load_balancer_arn   = "${aws_alb.ecs_alb.arn}"
  port                = "80"
  protocol            = "HTTP"

  default_action {
    target_group_arn   = "${aws_alb_target_group.ecs_target_group.arn}"
    type               = "forward"
  }
}

resource "aws_ecs_service
